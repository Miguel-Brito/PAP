# -*- coding: utf-8 -*-
import werkzeug
from datetime import datetime
import json
import math
import base64
import logging
_logger = logging.getLogger(__name__)

#from openerp.addons.website.models.website import slug

#import openerp.http as http
#from openerp.http import request

from odoo import http, _
from odoo.exceptions import AccessError
from odoo.http import request

class WebsiteBusinessDiretoryController(http.Controller):
	
    @http.route('/cportal', type="http", auth="public", website=True)
    def liga_clients(self, **kwargs):
        companies = http.request.env['res.partner'].sudo().search([('in_directory','=', True)])
        
        return http.request.render('website_liga.cportal_clients', {'companies': companies} )
        
    @http.route('/cportal/<id>', type="http", auth="public", website=True)
    def liga_client(self, id, **kwargs):
        company = http.request.env['res.partner'].sudo().browse(int(id))
        
        return http.request.render('website_liga.cportal', {'company': company} )	

    @http.route('/legal/termsofservice/', type="http", auth="public", website=True)
    def liga_termsofservice(self, **kwargs):
        
        return http.request.render('website_liga.termsofservice_liga')	

    @http.route('/legal/privacypolicy/', type="http", auth="public", website=True)
    def liga_privacypolicy(self, **kwargs):
        
        return http.request.render('website_liga.privacypolicy_liga')
######################################################################################

    @http.route('/directory', type="http", auth="public", website=True)
    def directory_search(self, **kwargs):
        return http.request.render('website_liga.directory_search', {} )

    @http.route('/directory/register', type="http", auth="public", website=True)
    def directory_register(self, **kwargs):
        return http.request.render('website_liga.directory_register', {} )

    @http.route('/directory/register/process', type="http", auth="public", website=True)
    def directory_register_process(self, **kwargs):

        values = {}
	for field_name, field_value in kwargs.items():
	    values[field_name] = field_value
	    
	#Create the new user
	new_user = request.env['res.users'].sudo().create({'name': values['name'], 'login': values['email'], 'email': values['email'], 'password': values['password'] })
	
	#Add the user to the business directory group
	directory_group = request.env['ir.model.data'].sudo().get_object('website_liga', 'directory_group')
        directory_group.users = [(4, new_user.id)]
        
	#Add the user to the Network User group
	group_network_user = request.env['ir.model.data'].sudo().get_object('network_liga', 'group_network_user')
        group_network_user.users = [(4, new_user.id)]

        #Remove 'Contact Creation' permission        
	contact_creation_group = request.env['ir.model.data'].sudo().get_object('base', 'group_partner_manager')
        contact_creation_group.users = [(3,new_user.id)]

        #Also remove them as an employee
	human_resources_group = request.env['ir.model.data'].sudo().get_object('base', 'group_user')
        human_resources_group.users = [(3,new_user.id)]

        #Automatically sign the new user in
        request.cr.commit()     # as authenticate will use its own cursor we need to commit the current transaction
	request.session.authenticate(request.env.cr.dbname, values['email'], values['password'])
	print '################################################'
        #Redirect them to thier account page
        return werkzeug.utils.redirect("/admin/account")

#####################-------

    @http.route('/directory/review/process', type='http', auth="public", website=True)
    def directory_review_process(self, **kwargs):
        
        values = {}
        for field_name, field_value in kwargs.items():
            values[field_name] = field_value

        directory_company = request.env['res.partner'].sudo().browse( int(values['business_id']) )    
        
        if directory_company.in_directory:
            if int(values['rating']) >= 1 and int(values['rating']) <= 5:
                request.env['res.partner.directory.review'].create({'business_id': values['business_id'], 'name': values['name'], 'description': values['description'], 'rating': values['rating'] })
                return werkzeug.utils.redirect("/directory/company/" + slug(directory_company) )
        else:
            return "ACCESS DENIED"

    @http.route('/directory/company/<model("res.partner"):directory_company>', type='http', auth="public", website=True)
    def directory_company_page(self, directory_company, **kwargs):
        if directory_company.in_directory:
            return http.request.render('website_liga.directory_company_page', {'directory_company': directory_company} )
        else:
            return "ACCESS DENIED"

    @http.route('/directory/search/<search_string>', type="http", auth="public", website=True)
    def directory_search_results(self, search_string, **kwargs):
        #directory_companies = request.env['res.partner'].sudo().search([('in_directory','=', True), ('name','ilike', search_string) ])
        featured_listings = request.env['res.partner'].sudo().search([('in_directory','=', True), ('name','ilike', search_string), ('featured_listing','=',True) ])
        regular_listings = request.env['res.partner'].sudo().search([('in_directory','=', True), ('name','ilike', search_string), ('featured_listing','=',False) ])
        return http.request.render('website_liga.directory_search_results', {'featured_listings': featured_listings, 'regular_listings': regular_listings} )

    @http.route('/directory/categories', type="http", auth="public", website=True)
    def directory_categories(self, **kwargs):
        directory_categories = request.env['res.partner.directory.category'].sudo().search([('parent_category','=',False)])
        return http.request.render('website_liga.directory_categories', {'directory_categories': directory_categories} )
        
    @http.route('/directory/auto-complete', auth="public", website=True, type='http')
    def directory_autocomplete(self, **kw):
        """Provides an autocomplete list of businesses and typs in the directory"""
        values = {}
        for field_name, field_value in kw.items():
            values[field_name] = field_value
        
        return_string = ""
        
        my_return = []
        
        #Get all businesses that match the search term
        directory_partners = request.env['res.partner'].sudo().search([('in_directory','=',True), ('name','=ilike',"%" + values['term'] + "%")],limit=5)
        
        for directory_partner in directory_partners:
            return_item = {"label": directory_partner.name + "<br/><sub>" + directory_partner.street + "</sub>","value": "/directory/search/" + str(values['term']) }
            my_return.append(return_item)

        #Get all business types that match the search term
        directory_categories = request.env['res.partner.directory.category'].sudo().search([('name','=ilike',"%" + values['term'] + "%")],limit=5)
        
        for directory_category in directory_categories:
            return_item = {"label": directory_category.name,"value": "/directory/search/" + str(values['term']) }
            my_return.append(return_item)
        
        return json.JSONEncoder().encode(my_return)
